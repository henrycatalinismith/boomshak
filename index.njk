---
title: boomshak
description: vector font
---
<!doctype html>
<html
  lang="en"
  dir="ltr"
  itemscope
  itemtype="http://schema.org/SoftwareSourceCode">
  <head>
    <meta charset="utf-8" />

    <link
      rel="canonical"
      href="https://hen.cat/boomshak"
    />

    <meta
      name="viewport"
      content="width=device-width, initial-scale=1"
    />

    <title>
      {{ title }}
    </title>

    <style>
      {{ css | safe }}
    </style>
  </head>
  <body>
    <main>

      <header>
        <h1 itemprop="name">
          {{ title }}
        </h1>
        {% image_boomshak %}
        <p itemprop="description">
          {{ package.description }}
        </p>
      </header>

      {{ readme.abstract | safe }}

      {% image_characters %}

      <section
        itemprop="workExample"
        itemscope
        itemtype="http://schema.org/CreativeWork">

        <p>
          Animation is one of the main things I want boomshak
          to be useful for.
          Animating SVG path transitions requires the paths
          before & after the transition to have the same
          number and type of points, which is a challenge when
          animating letters, as each letter differs in its
          number of strokes and how many points each stroke
          contains.
          But by repeating strokes and points until each glyph's
          path is as long as the very longest glyph, you can
          animate a path transition between any pair of letters.
        </p>

        <div></div>

        <script>
          {% set anim %}{% image_animation %}{% endset %}
          const callback = function([{ isIntersecting }]) {
            if (isIntersecting) {
              observer.unobserve(placeholder)
              placeholder.innerHTML = `{{ anim | safe }}`
            }
          }
          const options = {
            threshold: 0.3
          }
          const placeholder = document.querySelector(
            "[itemprop='workExample'] div"
          )
          const animation = document.querySelector(
            "[itemprop='workExample'] svg[aria-label]"
          )
          const observer = new IntersectionObserver(
            callback,
            options
          )
          observer.observe(placeholder)
        </script>

      </section>

    </main>
  </body>
</html>
